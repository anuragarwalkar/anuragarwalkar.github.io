{"version":3,"sources":["Components/Backdrop/Backdrop.tsx","Components/Navbar/NavLinks/NavLink.tsx","Components/Navbar/Navbar.tsx","Components/Footer/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx","Components/Navbar/NavLinks/NavLink.module.scss"],"names":["Backdrop","props","showBackdrop","show","className","join","onClick","hide","NavLink","styles","navbarMenu","to","navBarLink","Navbar","useState","showNav","setShowNav","mobileNav","Footer","About","lazy","Contact","App","fallback","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"oTAaeA,G,YAL0C,SAACC,GACtD,IAAMC,EAAe,CAAC,WAAYD,EAAME,KAAO,OAAS,MAC1D,OAAO,yBAAKC,UAAWF,EAAaG,KAAK,KAAMC,QAASL,EAAMM,S,uBCUjDC,EAdwC,WACrD,OACE,yBAAKJ,UAAWK,IAAOC,YACrB,kBAAC,IAAD,CAAMC,GAAG,IAAIP,UAAWK,IAAOG,YAA/B,QAEA,kBAAC,IAAD,CAAMD,GAAG,YAAYP,UAAWK,IAAOG,YAAvC,YAEA,kBAAC,IAAD,CAAMD,GAAG,WAAWP,UAAWK,IAAOG,YAAtC,WAEA,kBAAC,IAAD,CAAMD,GAAG,SAASP,UAAWK,IAAOG,YAApC,WCsBSC,EAhCA,WAAO,IAAD,EACWC,oBAAS,GADpB,mBACZC,EADY,KACHC,EADG,KAGbC,EAAY,CAAC,qBAAsBF,EAAU,WAAa,IAEhE,OACE,yBAAKX,UAAU,UACb,yBAAKA,UAAWa,EAAUZ,KAAK,MAC/B,kBAAC,EAAD,OAEA,yBAAKD,UAAU,mBACb,yBAAKA,UAAU,yBACb,uBACEA,UAAU,cACVE,QAAS,WACPU,GAAW,OAIjB,6BACE,+CACA,4DAGJ,kBAAC,EAAD,CAAUT,KAAM,kBAAMS,GAAW,IAAQb,KAAMY,IAC/C,yBAAKX,UAAU,gBACb,kBAAC,EAAD,SCrBOc,EARA,WACX,OACI,+B,OCCFC,EAAQC,gBAAK,kBAAM,gCACnBC,EAAUD,gBAAK,kBAAM,gCAiBZE,E,uKAbX,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,WAAD,CAAUC,SAAS,cACjB,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWP,IACtC,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,WAAWC,UAAWL,KAE1C,kBAAC,EAAD,W,GATUM,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACA,kBAAC,EAAD,QAGFC,SAASC,eAAe,SD6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEhJ5BC,EAAOC,QAAU,CAAC,WAAa,4BAA4B,WAAa,+B","file":"static/js/main.60ece5a8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Backdrop.scss';\r\n\r\nexport interface BackdropProps {\r\n    hide: () => void;\r\n    show: boolean;\r\n}\r\n\r\nconst Backdrop: React.FunctionComponent<BackdropProps> = (props) => {\r\n    const showBackdrop = [\"backdrop\", props.show ? \"show\" : null]\r\n  return <div className={showBackdrop.join(' ')} onClick={props.hide}></div>;\r\n};\r\n\r\nexport default Backdrop;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styles from \"./NavLink.module.scss\";\r\n\r\nexport interface NavLinkProps {}\r\n\r\nconst NavLink: React.FunctionComponent<NavLinkProps> = () => {\r\n  return (\r\n    <div className={styles.navbarMenu}>\r\n      <Link to=\"/\" className={styles.navBarLink}>Home</Link>\r\n\r\n      <Link to=\"/projects\" className={styles.navBarLink}>Projects</Link>\r\n\r\n      <Link to=\"/contact\" className={styles.navBarLink}>Contact</Link>\r\n\r\n      <Link to=\"/about\" className={styles.navBarLink}>About</Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavLink;\r\n","import React, { useState } from \"react\";\r\nimport \"./Navbar.scss\";\r\nimport Backdrop from \"../Backdrop/Backdrop\";\r\nimport NavLink from \"./NavLinks/NavLink\";\r\n\r\nconst Navbar = () => {\r\n  const [showNav, setShowNav] = useState(false);\r\n\r\n  const mobileNav = [\"navbar__mobile-nav\", showNav ? \"show-nav\" : \"\"];\r\n\r\n  return (\r\n    <div className=\"navbar\">\r\n      <div className={mobileNav.join(\" \")}>\r\n      <NavLink />\r\n      </div>\r\n      <div className=\"navbar__heading\">\r\n        <div className=\"navbar__heading--bars\">\r\n          <i\r\n            className=\"fas fa-bars\"\r\n            onClick={() => {\r\n              setShowNav(true);\r\n            }}\r\n          ></i>\r\n        </div>\r\n        <div>\r\n          <h1>Anurag Arwalkar</h1>\r\n          <span>Full Stack Web Developer</span>\r\n        </div>\r\n      </div>\r\n      <Backdrop hide={() => setShowNav(false)} show={showNav}></Backdrop>\r\n      <div className=\"navbar__menu\">\r\n        <NavLink />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, { Component, lazy, Suspense } from \"react\";\nimport Navbar from \"./Components/Navbar/Navbar\";\nimport Footer from \"./Components/Footer/Footer\";\nimport { Route } from \"react-router-dom\";\n\nconst About = lazy(() => import(\"./Components/About/About\"));\nconst Contact = lazy(() => import(\"./Components/Contact/Contact\"));\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Navbar></Navbar>\n        <Suspense fallback=\"loading...\">\n          <Route exact path=\"/about\" component={About} />\n          <Route exact path=\"/contact\" component={Contact} />\n        </Suspense>\n        <Footer></Footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n    <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbarMenu\":\"NavLink_navbarMenu__2-tvg\",\"navBarLink\":\"NavLink_navBarLink__2zb21\"};"],"sourceRoot":""}