{"version":3,"sources":["components/footer/Footer.tsx","components/backdrop/Backdrop.tsx","components/navbar/NavLinks/NavLink.tsx","components/navbar/Navbar.tsx","App.tsx","serviceWorkerRegistration.ts","index.tsx","components/navbar/NavLinks/NavLink.module.scss"],"names":["Footer","Backdrop","props","showBackdrop","show","className","join","onClick","hide","NavLink","styles","navbarMenu","to","navBarLink","Navbar","useState","showNav","setShowNav","mobileNav","About","lazy","Contact","Home","Projects","App","fallback","exact","path","title","component","from","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","module","exports"],"mappings":"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","file":"static/js/main.2468b75b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Footer = () => {\n    return (\n        <div>\n            \n        </div>\n    )\n}\n\nexport default Footer;","import React from \"react\";\nimport './Backdrop.scss';\n\nexport interface BackdropProps {\n    hide: () => void;\n    show: boolean;\n}\n\nconst Backdrop: React.FunctionComponent<BackdropProps> = (props) => {\n    const showBackdrop = [\"backdrop\", props.show ? \"show\" : null]\n  return <div className={showBackdrop.join(' ')} onClick={props.hide}></div>;\n};\n\nexport default Backdrop;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styles from \"./NavLink.module.scss\";\n\nexport interface NavLinkProps {}\n\nconst NavLink: React.FunctionComponent<NavLinkProps> = () => {\n  return (\n    <div className={styles.navbarMenu}>\n      <Link to=\"/home\" className={styles.navBarLink}>\n        Home\n      </Link>\n\n      <Link to=\"/projects\" className={styles.navBarLink}>\n        Projects\n      </Link>\n\n      <Link to=\"/contact\" className={styles.navBarLink}>\n        Contact\n      </Link>\n\n      <Link to=\"/about\" className={styles.navBarLink}>\n        About\n      </Link>\n    </div>\n  );\n};\n\nexport default NavLink;\n","import React, { useState } from \"react\";\nimport \"./Navbar.scss\";\nimport Backdrop from \"../backdrop/Backdrop\";\nimport NavLink from \"./NavLinks/NavLink\";\n\nconst Navbar = () => {\n  const [showNav, setShowNav] = useState(false);\n\n  const mobileNav = [\"navbar__mobile-nav\", showNav ? \"show-nav\" : \"\"];\n\n  return (\n    <div className=\"navbar\">\n      <div className={mobileNav.join(\" \")}>\n      <NavLink />\n      </div>\n      <div className=\"navbar__heading\">\n        <div className=\"navbar__heading--bars\">\n          <i\n            className=\"fas fa-bars\"\n            onClick={() => {\n              setShowNav(true);\n            }}\n          ></i>\n        </div>\n        <div>\n          <h1>Anurag Arwalkar</h1>\n          <span>Full Stack Web Developer</span>\n        </div>\n      </div>\n      <Backdrop hide={() => setShowNav(false)} show={showNav}></Backdrop>\n      <div className=\"navbar__menu\">\n        <NavLink />\n      </div>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React, { Fragment, lazy, Suspense } from \"react\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport Footer from \"./components/footer/Footer\";\nimport Navbar from \"./components/navbar/Navbar\";\n\nconst About = lazy(() => import(\"./screens/about/About\"));\nconst Contact = lazy(() => import(\"./screens/contact/Contact\"));\nconst Home = lazy(() => import(\"./screens/home/Home\"));\nconst Projects = lazy(() => import(\"./screens/projects/Project\"));\n\nconst App = () => {\n  return (\n    <Fragment>\n      <Navbar></Navbar>\n      <Suspense fallback=\"loading...\">\n        <Route exact path=\"/home\" title=\"Anurag\" component={Home} />\n        <Route exact path=\"/projects\" component={Projects} />\n        <Route exact path=\"/about\" component={About} />\n        <Route exact path=\"/contact\" component={Contact} />\n      </Suspense>\n      <Redirect exact from=\"/\" to=\"/about\" />\n      <Footer></Footer>\n    </Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"@fortawesome/fontawesome-free/css/all.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport App from \"./App\";\nimport \"./index.scss\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorkerRegistration.register();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbarMenu\":\"NavLink_navbarMenu__1wJQm\",\"navBarLink\":\"NavLink_navBarLink__2r3x-\"};"],"sourceRoot":""}