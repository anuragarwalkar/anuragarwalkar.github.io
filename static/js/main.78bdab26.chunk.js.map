{"version":3,"sources":["Assets/images/anurag_arwalkar.jpg","Components/Navbar/Navbar.tsx","Components/Footer/Footer.tsx","Components/About/About.jsx","Components/Contact/Contact.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Navbar","className","to","Footer","About","src","myPhoto","alt","href","download","style","marginTop","rel","target","Contact","App","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,6C,sOCuB5BC,EAnBA,WACX,OACI,yBAAKC,UAAU,UACf,yBAAKA,UAAU,mBACX,+CACA,2DAGJ,yBAAKA,UAAU,gBACX,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,0BAAvB,QACA,kBAAC,IAAD,CAAMC,GAAG,YAAYD,UAAU,0BAA/B,YACA,kBAAC,IAAD,CAAMC,GAAG,WAAWD,UAAU,0BAA9B,WACA,kBAAC,IAAD,CAAMC,GAAG,SAASD,UAAU,0BAA5B,YCNGE,EARA,WACX,OACI,+B,yBC6COC,EA7CD,WACZ,OACE,yBAAKH,UAAU,SACb,yBAAKA,UAAU,gBACb,yBAAKI,IAAKC,IAASC,IAAI,qBAEzB,yBAAKN,UAAU,eACb,wCACA,ySAMA,6BACA,uBAAGA,UAAU,gCAAgCO,KAAK,gCAAgCC,UAAQ,GAAC,uBAAGR,UAAU,6BAAxG,qBAEA,yBAAKS,MAAO,CAACC,UAAU,SACrB,uBACEH,KAAK,0CACLI,IAAI,sBACJC,OAAO,UAEP,uBAAGZ,UAAU,0BAEf,uBACEO,KAAK,4CACLI,IAAI,sBACJC,OAAO,UAEP,uBAAGZ,UAAU,yBAEf,uBACEO,KAAK,4CACLI,IAAI,sBACJC,OAAO,UAEP,uBAAGZ,UAAU,gC,OC/BVa,EARC,WACZ,OACI,4CCgBOC,E,uKAXX,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWd,IACtC,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,WAAWC,UAAWJ,IACxC,kBAAC,EAAD,W,GAPUK,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACA,kBAAC,EAAD,QAGFC,SAASC,eAAe,SD6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.78bdab26.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/anurag_arwalkar.77c420af.jpg\";","import React from 'react';\r\nimport './Navbar.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <div className=\"navbar\">\r\n        <div className=\"navbar__heading\">\r\n            <h1>Anurag Arwalkar</h1>\r\n            <span>Full Stack Web Developer</span>\r\n        </div>\r\n\r\n        <div className=\"navbar__menu\">\r\n            <Link to=\"/\" className=\"navbar__menu__nav-link\">Home</Link>\r\n            <Link to=\"/projects\" className=\"navbar__menu__nav-link\">Projects</Link>\r\n            <Link to=\"/contact\" className=\"navbar__menu__nav-link\">Contact</Link>\r\n            <Link to=\"/about\" className=\"navbar__menu__nav-link\">About</Link>\r\n        </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport \"./About.scss\";\r\nimport myPhoto from \"../../Assets/images/anurag_arwalkar.jpg\";\r\n\r\nconst About = () => {\r\n  return (\r\n    <div className=\"about\">\r\n      <div className=\"about__photo\">\r\n        <img src={myPhoto} alt=\"Anurag Arwalkar\" />\r\n      </div>\r\n      <div className=\"about__info\">\r\n        <h1>About Me</h1>\r\n        <p>\r\n          I Anurag working as a Full Stack Web developer having a total of 4.5\r\n          years of experience in this industry and from last 2 Years doing\r\n          programming, Apart from web development I like to share my skills\r\n          through YouTube. Check out my GitHub or YouTube page for more info\r\n        </p>\r\n        <div>\r\n        <a className=\"about__info--download-btn btn\" href=\"/files/pdf/anurags_resume.pdf\" download><i className=\"fas fa-arrow-circle-down\"></i> Download Resume</a>\r\n        </div>\r\n        <div style={{marginTop:'1rem'}}>\r\n          <a\r\n            href=\"https:/www.youtube.com/anuragcreation7/\"\r\n            rel=\"noopener noreferrer\"\r\n            target=\"_blank\"\r\n          >\r\n            <i className=\"fab fa-youtube fa-lg\"></i>\r\n          </a>\r\n          <a\r\n            href=\"https://www.instagram.com/anuragarwalkar/\"\r\n            rel=\"noopener noreferrer\"\r\n            target=\"_blank\"\r\n          >\r\n            <i className=\"fab fa-github fa-lg\"></i>\r\n          </a>\r\n          <a\r\n            href=\"https://www.instagram.com/anuragarwalkar/\"\r\n            rel=\"noopener noreferrer\"\r\n            target=\"_blank\"\r\n          >\r\n            <i className=\"fab fa-instagram fa-lg\"></i>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React from 'react';\r\n\r\nconst Contact = () => {\r\n    return (\r\n        <div>\r\n            contact me\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact;","import React, { Component } from 'react';\nimport Navbar from './Components/Navbar/Navbar';\nimport Footer from './Components/Footer/Footer';\nimport About from './Components/About/About';\nimport { Route } from 'react-router-dom';\nimport Contact from './Components/Contact/Contact';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Navbar></Navbar>\n        <Route exact path=\"/about\" component={About} />\n        <Route exact path=\"/contact\" component={Contact} />\n        <Footer></Footer>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n    <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}